from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from request import new_book_by_genre, best_book_by_genre, popular_book_by_genre, find_book_next_page

from loader import dp, bot
from states import Genres
from keyboard.default.next_page_buttons import choice
from keyboard.default.genres_buttons import genres
from keyboard.default.type_of_book_buttons import choose_type
from loguru import logger


@logger.catch()
@dp.message_handler(Command('genres'))
async def choosing_genre(message: types.Message):
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /genres')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤', reply_markup=genres)
    await Genres.choice.set()


@logger.catch()
@dp.message_handler(state=Genres.choice)
async def choosing_type_of_book(message: types.Message, state: FSMContext):
    genre_types = ['–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ üõ∏', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã üïµÔ∏è‚Äç‚ôÇÔ∏è', '–†–æ–º–∞–Ω ‚ù§Ô∏è', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üìö', '–ö–ª–∞—Å—Å–∏–∫–∞ ‚ú®', '–£–∂–∞—Å—ã üëÄ']
    answer = message.text
    if answer in genre_types:
        await state.update_data(genre=answer)
        await message.answer('–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–Ω–∏–≥', reply_markup=choose_type)
        await Genres.choose_type.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∂–∞–Ω—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        await Genres.choice.set()


@logger.catch()
@dp.message_handler(state=Genres.choose_type)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–æ–≤—ã–µ üÜï':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /genres')
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É', reply_markup=ReplyKeyboardRemove())
        data = await state.get_data()
        book_result = await new_book_by_genre(message=message, bot=bot, data=data)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await Genres.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == '–õ—É—á—à–∏–µ üî•':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /genres')
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É', reply_markup=ReplyKeyboardRemove())
        data = await state.get_data()
        book_result = await best_book_by_genre(message=message, bot=bot, data=data)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await Genres.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == '–û–±—Å—É–∂–¥–∞–µ–º—ã–µ üó£':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /genres')
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É', reply_markup=ReplyKeyboardRemove())
        data = await state.get_data()
        book_result = await popular_book_by_genre(message=message, bot=bot, data=data)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await Genres.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!"')
        await Genres.choose_type.set()


@logger.catch()
@dp.message_handler(state=Genres.next_page)
async def next_page_book(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–î–∞ ‚úÖ" or answer == "–î–∞":
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–º–∞–Ω–¥–µ /genres')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        data = await state.get_data()
        book_result = await find_book_next_page(url=data["next_page_url"], message=message, bot=bot)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await Genres.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == "–ù–µ—Ç ‚ùå" or answer == "–ù–µ—Ç":
        await message.answer('–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await Genres.next_page.set()
