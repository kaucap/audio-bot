from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove
from loguru import logger

from keyboard.default.genres_buttons import genres
from keyboard.default.type_of_book_buttons import choose_type
from loader import dp, bot
from states import Genres
from utils.handlers.common import clear_user_history_if_reach_limit, user_wants_see_next_page
from utils.handlers.genres import send_book_new, send_book_best, send_book_discussed


@logger.catch()
@dp.message_handler(Command('genres'))
async def choosing_genre(message: types.Message):
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /genres')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤', reply_markup=genres)
    await Genres.choice.set()


@logger.catch()
@dp.message_handler(state=Genres.choice)
async def choosing_type_of_book(message: types.Message, state: FSMContext):
    genre_types = ['–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ üõ∏', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã üïµÔ∏è‚Äç‚ôÇÔ∏è', '–†–æ–º–∞–Ω ‚ù§Ô∏è', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üìö', '–ö–ª–∞—Å—Å–∏–∫–∞ ‚ú®', '–£–∂–∞—Å—ã üëÄ']
    answer = message.text
    if answer in genre_types:
        await state.update_data(genre=answer)
        data = await state.get_data()
        request = f'–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É: {data["genre"]}'
        await clear_user_history_if_reach_limit(message=message, request=request)
        await message.answer('–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–Ω–∏–≥', reply_markup=choose_type)
        await Genres.choose_type.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∂–∞–Ω—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        await Genres.choice.set()


@logger.catch()
@dp.message_handler(state=Genres.choose_type)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–æ–≤—ã–µ üÜï':
        await send_book_new(message=message, state=state, bot=bot)
    elif answer == '–õ—É—á—à–∏–µ üî•':
        await send_book_best(message=message, state=state, bot=bot)
    elif answer == '–û–±—Å—É–∂–¥–∞–µ–º—ã–µ üó£':
        await send_book_discussed(message=message, state=state, bot=bot)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!"')
        await Genres.choose_type.set()


@logger.catch()
@dp.message_handler(state=Genres.next_page)
async def next_page_book(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–î–∞ ‚úÖ" or answer == "–î–∞":
        current_command = 'genres'
        information_for_search_books = {'command': current_command, 'message': message, 'state': state,
                                        'bot': bot, 'current_state': Genres}
        await user_wants_see_next_page(information_for_search_books)
    elif answer == "–ù–µ—Ç ‚ùå" or answer == "–ù–µ—Ç":
        await message.answer('–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await Genres.next_page.set()
