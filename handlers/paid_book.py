from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove
from loguru import logger

from keyboard.default.type_of_book_buttons import choose_type
from loader import dp, bot
from states import PaidBook
from utils.handlers.common import clear_user_history_if_reach_limit, user_wants_see_next_page
from utils.handlers.paid_book import send_paid_book_results_new, send_paid_book_results_best, \
    send_paid_book_results_popular


@logger.catch()
@dp.message_handler(Command("paid_book"))
async def looking_new_book(message: types.Message):
    request = '–ü–æ–∏—Å–∫ –ø–ª–∞—Ç–Ω—ã—Ö –∫–Ω–∏–≥'
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /paid_book')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–Ω–∏–≥', reply_markup=choose_type)
    await clear_user_history_if_reach_limit(message=message, request=request)
    await PaidBook.book.set()


@logger.catch()
@dp.message_handler(state=PaidBook.book)
async def choosing_type_of_book(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–æ–≤—ã–µ üÜï':
        await send_paid_book_results_new(message=message, bot=bot, state=state)
    elif answer == '–õ—É—á—à–∏–µ üî•':
        await send_paid_book_results_best(message=message, bot=bot, state=state)
    elif answer == '–û–±—Å—É–∂–¥–∞–µ–º—ã–µ üó£':
        await send_paid_book_results_popular(message=message, bot=bot, state=state)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!"')
        await PaidBook.book.set()


@logger.catch()
@dp.message_handler(state=PaidBook.next_page)
async def next_page_book(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–î–∞ ‚úÖ" or answer == "–î–∞":
        current_command = 'paid_book'
        information_for_search_books = {'command': current_command, 'message': message, 'state': state,
                                        'bot': bot, 'current_state': PaidBook}
        await user_wants_see_next_page(information_for_search_books)
    elif answer == "–ù–µ—Ç ‚ùå" or answer == "–ù–µ—Ç":
        await message.answer('–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await PaidBook.next_page.set()
