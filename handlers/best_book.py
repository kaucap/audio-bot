from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove
from loguru import logger

from keyboard.default.period_of_time_buttons import choose_time
from loader import dp, bot
from states import BestBook
from utils.handlers.best_book import send_results_duration_month, send_results_duration_week, \
    send_results_duration_all_time, selected_time_day
from utils.handlers.common import clear_user_history_if_reach_limit, user_wants_see_next_page


@logger.catch()
@dp.message_handler(Command("best_book"))
@dp.throttled(rate=5)
async def looking_new_book(message: types.Message):
    request = '–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –∫–Ω–∏–≥'
    await clear_user_history_if_reach_limit(message=message, request=request)
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /best_book')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –º–Ω–µ –≤—ã–≤–µ—Å—Ç–∏ –ª—É—á—à–∏–µ –∫–Ω–∏–≥–∏?', reply_markup=choose_time)
    await BestBook.choice.set()


@logger.catch()
@dp.message_handler(state=BestBook.choice)
async def choosing_time(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–î–µ–Ω—å ‚ú®':
        await selected_time_day(state=state, message=message, bot=bot)
    elif answer == '–ù–µ–¥–µ–ª—è üí´':
        await send_results_duration_week(bot=bot, state=state, message=message)
    elif answer == '–ú–µ—Å—è—Ü ‚≠êÔ∏è':
        await send_results_duration_month(bot=bot, state=state, message=message)
    elif answer == '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è üí•':
        await send_results_duration_all_time(bot=bot, state=state, message=message)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!')
        await BestBook.choice.set()


@logger.catch()
@dp.message_handler(state=BestBook.next_page)
async def next_page(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–î–∞ ‚úÖ" or answer == "–î–∞":
        current_command = 'best_book'
        information_for_search_books = {'command': current_command, 'message': message, 'state': state,
                                        'bot': bot, 'current_state': BestBook}
        await user_wants_see_next_page(information_for_search_books)
    elif answer == "–ù–µ—Ç ‚ùå" or answer == "–ù–µ—Ç":
        await message.answer('–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await BestBook.next_page.set()
