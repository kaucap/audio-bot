from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from request import find_book_next_page, best_book_day, best_book_week, best_book_month, best_book_all_time

from loader import dp, bot
from states import BestBook
from keyboard.default.period_of_time_buttons import choose_time
from keyboard.default.next_page_buttons import choice
from loguru import logger


@logger.catch()
@dp.message_handler(Command("best_book"))
async def looking_new_book(message: types.Message):
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /best_book')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –º–Ω–µ –≤—ã–≤–µ—Å—Ç–∏ –ª—É—á—à–∏–µ –∫–Ω–∏–≥–∏?', reply_markup=choose_time)
    await BestBook.choice.set()


@logger.catch()
@dp.message_handler(state=BestBook.choice)
async def choosing_time(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–î–µ–Ω—å ‚ú®':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /best_book')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        await best_book_day(message=message, bot=bot)
        await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
        await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
        await state.reset_state()
    elif answer == '–ù–µ–¥–µ–ª—è üí´':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /best_book')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        book_result = await best_book_week(message=message, bot=bot)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await BestBook.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == '–ú–µ—Å—è—Ü ‚≠êÔ∏è':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /best_book')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        book_result = await best_book_month(message=message, bot=bot)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await BestBook.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è üí•':
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /best_book')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        book_result = await best_book_all_time(message=message, bot=bot)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await BestBook.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!')
        await BestBook.choice.set()


@logger.catch()
@dp.message_handler(state=BestBook.next_page)
async def next_page(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–î–∞ ‚úÖ" or answer == "–î–∞":
        logger.info('–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–º–∞–Ω–¥–µ /best_book')
        await message.answer('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∫–Ω–∏–≥–∏', reply_markup=ReplyKeyboardRemove())
        data = await state.get_data()
        book_result = await find_book_next_page(url=data["next_page_url"], message=message, bot=bot)
        if book_result:
            await state.update_data(next_page_url=book_result)
            await message.answer('–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', reply_markup=choice)
            await BestBook.next_page.set()
        else:
            await message.answer('–ö–Ω–∏–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help')
            await state.reset_state()
    elif answer == "–ù–µ—Ç ‚ùå" or answer == "–ù–µ—Ç":
        await message.answer('–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await BestBook.next_page.set()
